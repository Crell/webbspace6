<?php
// $Id: tabname_tweaker.module,v 1.1 2009/06/23 15:04:15 eaton Exp $

/**
 * Implementation of hook_menu_alter()
 */
function tabname_tweaker_menu_alter(&$items) {
  $items['node/%node/view']['title callback'] = 'tabname_tweaker_title_callback';
  $items['node/%node/view']['title arguments'] = array(1);
}

/**
 * Implementation of hook_menu()
 */
function tabname_tweaker_menu() {
  $items = array();
  $items['admin/content/tabname-tweaker'] = array(
    'title' => 'Tab name tweaker',
    'access arguments' => array('administer content types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabname_tweaker_form'),
  );
  return $items;
}

/**
 * Title callback function for the node/%node/view tab.
 */
function tabname_tweaker_title_callback($node) {
  $title = variable_get('tabname_tweaker_' . $node->type, '');
  if (empty($title)) {
    $title = variable_get('tabname_tweaker_fallback_title', '');
  }
  
  if (!empty($title)) {
    if (variable_get('tabname_tweaker_translate', FALSE)) {
      $title = t($title);
    }
    if (module_exists('token')) {
      $title = token_replace($title, 'node', $node);
    }
  }
  else {
    $title = t('View');
  }
  
  return $title;
}

/**
 * Form builder function for the Tabname Tweaker settings page.
 */
function tabname_tweaker_form() {
  $form = array();
  $form['tabname_tweaker_fallback_title'] = array(
    '#title' => t('Custom View tab name'),
    '#type' => 'textfield',
    '#default_value' => variable_get('tabname_tweaker_fallback_title', ''),
    '#description' => t('This text will be used in place of the word "View" when displaying the tabs for a node.')
  );
  $form['tabname_tweaker_translate'] = array(
    '#title' => 'Attempt to translate titles',
    '#type' => 'checkbox',
    '#default_value' => variable_get('tabname_tweaker_translate', FALSE),
    '#description' => t('Pass the custom title through the Drupal t() function before displaying it.'),
  );
  
  $form['node_types'] = array(
    '#title' => t('Node type overrides'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  foreach(node_get_types('names') as $type => $name) {
    $form['node_types']['tabname_tweaker_' . $type] = array(
      '#title' => $name,
      '#type' => 'textfield',
      '#default_value' => variable_get('tabname_tweaker_' . $type, ''),
      '#description' => t('This text will be used in place of the word "View" when displaying the tabs for a %type node.', array('%type' => $name))
    );
  }
  
  if (module_exists('token')) {
    $form['tabname_tweaker_fallback_title']['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
    $form['tabname_tweaker_translate']['#description'] .= ' ' . t('This option should not be used with tokens.');
    
    foreach (element_children($form['node_types']) as $key) {
      $form['node_types'][$key]['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
    }
    $form['token_help'] = array(
      '#title' => t('Replacement tokens'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => theme('token_help', 'node'),
    );
  }
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter()
 */
function tabname_tweaker_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_type_form') {
    $type = isset($form['#node_type']) ? $form['#node_type']->type : '';
    $form['identity']['tabname_tweaker']['tabname_tweaker'] = array(
      '#title' => t('Custom tab title'),
      '#type' => 'textfield',
      '#description' => t('Text to use instead of "View" when displaying the node Edit and View tabs.'),
      '#default_value' => variable_get('tabname_tweaker_' . $type, NULL),
    );
    
    if (module_exists('token')) {
      $form['identity']['tabname_tweaker']['tabname_tweaker']['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
      $form['identity']['tabname_tweaker']['token_help'] = array(
        '#title' => t('Replacement tokens'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#description' => theme('token_help', 'node'),
      );
    }
  }
}
