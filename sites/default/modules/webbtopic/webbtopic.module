<?php

define('WEBBTOPIC_NUM_SUGGESTIONS', 10);
define('WEBBTOPIC_AGE_SUGGESTIONS', 2592000);  // 30 days, in seconds
define('WEBBTOPIC_NUM_AUTOCOMPLETE', 20);
define('WEBBTOPIC_AGE_AUTOCOMPLETE', 5184000); // 60 days, in seconds

/**
 * Implementation of hook_menu().
 */
function webbtopic_menu() {
  $items = array();

  $items['webbtopic/autocomplete'] = array(
    'page callback' => 'webbtopic_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/og/webbtopic'] = array(
    'title' => 'WeBB posting topics',
    'description' => 'Configure the WeBBspace posting system topics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webbtopic_settings'),
    'access arguments' => array('administer WeBB topics'),
    'file' => 'webbtopic.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function webbtopic_perm() {
  return array('administer WeBB topics');
}

/**
 * Determine if the specified type is an OG node that supports topics.
 */
function webbtopic_is_topic_og($type) {
  return in_array($type, variable_get('webbtopic_og_types', array()));
}

/**
 * Determine if the specified type supports topics in the specified group.
 *
 * @param $group_nid
 *   The nid of the group node related to this node type.
 * @param $type
 *   The type of node to check.
 */
/*
function webbtopic_supports_topic($group_type, $type) {
  return in_array($type, variable_get('webbtopic_og_types', array()));
}
*/

/**
 * Autocomplete callback; Returns possible topics for the given group.
 *
 * @param int $gid
 * 	The group id of the group we want to autocomplete within.
 * @param $field_name
 *   The name of the field we're autocompleting.
 * @param string $string
 * 	The string to auto-complete if possible.
 */
function webbtopic_autocomplete($gid, $field_name, $string) {

  $matches = array();
  if ($string) {
    $dbinfo = content_database_info(content_fields($field_name));
    $result = db_query_range("SELECT DISTINCT {$dbinfo['columns']['value']['column']} as topic
      FROM {{$dbinfo['table']}} f
        INNER JOIN {node} n ON f.nid=n.nid
          WHERE f.nid IN (SELECT nid FROM {og_ancestry} WHERE group_nid=%d)
            AND %d-n.changed < %d
            AND {$dbinfo['columns']['value']['column']} LIKE ('%s%%')
          ORDER BY topic", array(
        $gid,
        time(),
        WEBBTOPIC_AGE_AUTOCOMPLETE,
        $string,
      ), 0, WEBBTOPIC_NUM_AUTOCOMPLETE);

    while ($data = db_fetch_object($result)) {
      $value = check_plain($data->topic);
      $matches[$value] = $value;
    }

  }
  drupal_json($matches);
}

/**
 * Implementation of hook_form_alter().
 */
function webbtopic_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form' && webbtopic_is_topic_og($form['type']['#value'])) {
    _webbtopic_form_alter_topic_og($form, $form_state, $form_id);
  }
}

/**
 * Utility function to generate the clickable suggestions array for the widget.
 *
 * @param $group
 *   The OG node of the group we want to suggest within.
 * @param $field_name
 *   The field we are suggesting a value for.
 * @return
 *   A formatted and themed list of suggestions.
 */
function webbtopic_suggestions($group, $field_name) {
  $topics = array();

  // This is almost the same as the autocomplete logic, except that
  // we order by the last use and have a different set of limits.
  // We also don't restrict on the name pattern at all.
  $dbinfo = content_database_info(content_fields($field_name));
  $result = db_query_range("SELECT DISTINCT {$dbinfo['columns']['value']['column']} as topic
    FROM {{$dbinfo['table']}} f
      INNER JOIN {node} n ON f.nid=n.nid
    WHERE f.nid IN (SELECT nid FROM {og_ancestry} WHERE group_nid=%d)
      AND %d-n.changed < %d
    ORDER BY n.changed", array(
      $group->nid,
      time(),
      WEBBTOPIC_AGE_SUGGESTIONS,
      $string,
    ), 0, WEBBTOPIC_NUM_SUGGESTIONS);

  while ($record = db_fetch_object($result)) {
    $topics[] = theme('webbtopic_topic', $record->topic);
  }

  return implode(', ', $topics);
}

/**
 * Implementation of hook_theme().
 */
function webbtopic_theme($existing, $type, $theme, $path) {
  return array(
    'webbtopic_topic' => array(
      'arguments' => array('name' => ''),
      'file' => 'webbtopic.theme.inc',
    ),
    'text_textfield_ogsuggest' => array(
      'arguments' => array('element' => NULL),
      'file' => 'webbtopic.theme.inc',
    ),
  );
}

function _webbtopic_form_alter_topic_og(&$form, &$form_state, $form_id) {

  // Allow an admin (only) to configure what the topic label is and on what nodes
  // it applies for nodes in this group.

  $form['webbtopic'] = array(
  	'#type' => 'fieldset',
    '#title' => t('Topics'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => user_access('adminster WeBB topics'),
  );
  $form['webbtopic']['webbtopic_topic'] = array(
    '#type' => 'textfield',
    '#title' => t('Topic label'),
    '#description' => t('Specify the topic label to be applied to posts in this group.'),
    '#default_value' => $form['#node']->webb['topic_label'],
  );

  if (module_exists('content')) {
    $form['webbtopic']['#weight'] = content_extra_field_weight($form['#node']->type, 'webbtopic');
  }

  $form['#submit'][] = 'webbtopic_board_node_form_submit';

}

function _webbtopic_nodeapi_topic_og(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      $node->webb['topic_label'] = db_result(db_query("SELECT label FROM {webbtopic_label} WHERE vid=%d", $node->vid));
      break;
    case 'insert':
      // Set the label for topics in this group.
      db_insert('webbtopic_label', array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'label' => $node->webbtopic_topic,
      ));
      break;
    case 'update':
      // Set the label for topics in this group, with the good old delete/insert cycle.
      db_query("DELETE FROM {webbtopic_label} WHERE vid=%d", $node->vid);
      db_insert('webbtopic_label', array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'label' => $node->webbtopic_topic,
      ));
      break;
    case 'delete':
      db_query("DELETE FROM {webbtopic_label} WHERE nid=%d", $node->nid);
      break;
    case 'delete revision':
      db_query("DELETE FROM {webbtopic_label} WHERE vid=%d", $node->vid);
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function webbtopic_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (webbtopic_is_topic_og($node->type)) {
    return _webbtopic_nodeapi_topic_og($node, $op, $a3, $a4);
  }
}

/**
 * Implementation of hook_content_extra_fields.
 */
function webbtopic_content_extra_fields($type_name) {
  $extras = array();

  if (webbtopic_is_topic_og($type_name)) {
    $extra['webbtopic'] = array(
      'label' => t('WeBB topic configuration'),
      'description' => t('Configuration form for topics on a given Group.'),
      'weight' => 0,
    );
  }

  return $extra;
}

/* ---------- CCK widget --------------- */

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function webbtopic_widget_info() {
  return array(
    'text_textfield_ogsuggest' => array(
      'label' => t('Text field (OG auto-suggest)'),
      'field types' => array('text'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function webbtopic_elements() {
  return array(
    'text_textfield_ogsuggest' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('webbtopic_textfield_ogsuggest_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function webbtopic_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      if ($widget['type'] == 'text_textfield_ogsuggest') {
        $form['size'] = array(
          '#type' => 'textfield',
          '#title' => t('Size of textfield'),
          '#default_value' => $size,
          '#element_validate' => array('_text_widget_settings_size_validate'),  // Reusing the function from text.module.
          '#required' => TRUE,
        );
      }
      return $form;

    case 'save':
      return array('size');
  }
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function webbtopic_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function webbtopic_textfield_ogsuggest_process($element, $edit, $form_state, $form) {

  // This is all copied verbatim from text_textfield_process():
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'text'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  $element[$field_key]['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  // This is the new stuff relevant to us.
  $group = og_get_group_context();
  $element[$field_key]['#autocomplete_path'] = 'webbtopic/autocomplete/'. $group->nid .'/'. $element['#field_name'];
  if (trim($element[$field_key]['#description'])) {
    $element[$field_key]['#description'] .= '<br />';
  }
  $element[$field_key]['#description'] .= t('Recently used: ') . webbtopic_suggestions($group, $element['#field_name']);

  // If there's a parent specified, use the parent's field value as the default.
  $parent_nid = arg(3);
  if (!empty($parent_nid)) {
    $parent = node_load((int)$parent_nid);
    $node_field = $parent->$element['#field_name'];
    $element[$field_key]['#default_value'] = $node_field[0]['value'];
  }

  return $element;
}
