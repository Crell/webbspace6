<?php

define('WEBBTOPIC_NUM_SUGGESTIONS', 10);
define('WEBBTOPIC_AGE_SUGGESTIONS', 2592000);  // 30 days, in seconds
define('WEBBTOPIC_NUM_AUTOCOMPLETE', 20);
define('WEBBTOPIC_AGE_AUTOCOMPLETE', 5184000); // 60 days, in seconds

/**
 * Implementation of hook_menu().
 */
function webbtopic_menu() {
  $items = array();

  $items['webbtopic/autocomplete'] = array(
    'page callback' => 'webbtopic_autocomplete',
    'access arguments' => array('access content'),
  );

  $items['admin/og/webbtopic'] = array(
    'title' => 'WeBB posting topics',
    'description' => 'Configure the WeBBspace posting system topics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webbtopic_settings'),
    'access arguments' => array('administer WeBB topics'),
    'file' => 'webbtopic.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function webbtopic_perm() {
  return array('administer WeBB topics');
}

/**
 * Determine if the specified type is an OG node that supports topics.
 */
function webbtopic_is_topic_og($type) {
  return in_array($type, variable_get('webbtopic_og_types', array()));
}

/**
 * Determine if the specified type supports topics in the specified group.
 *
 * @param $group_nid
 *   The nid of the group node related to this node type.
 * @param $type
 *   The type of node to check.
 */
/*
function webbtopic_supports_topic($group_type, $type) {
  return in_array($type, variable_get('webbtopic_og_types', array()));
}
*/

/**
 * Autocomplete callback; Returns possible topics for the given group.
 *
 * @param int $gid
 * 	The group id of the group we want to autocomplete within.
 * @param string $string
 * 	The string to auto-complete if possible.
 */
function webbtopic_autocomplete($gid, $string) {

  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT DISTINCT wt.topic
      FROM {webbtopic_topic} wt
        INNER JOIN {node} n ON wt.nid=n.nid
  	  WHERE wt.nid IN (SELECT nid FROM {og_ancestry} WHERE group_nid=%d)
  	    AND %d-n.changed < %d
  	    AND topic LIKE ('%s%%')
  	  ORDER BY topic", array(
        $gid,
        time(),
        WEBBTOPIC_AGE_AUTOCOMPLETE,
        $string,
      ), 0, WEBBTOPIC_NUM_AUTOCOMPLETE);

    while ($data = db_fetch_object($result)) {
      $value = check_plain($data->topic);
      $matches[$value] = $value;
    }

  }
  print drupal_to_js($matches);
  exit();
}

/**
 * Implementation of hook_form_alter().
 */
function webbtopic_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'node-form' && webbtopic_is_topic_og($form['type']['#value'])) {
    _webbtopic_form_alter_topic_og($form, $form_state, $form_id);
  }

  // If it's a node form and the node type is listed as taking topics for the
  // current group (is that logic complex enough for you?), show the topic field.
  if ($form['#id'] == 'node-form') {
    $group = og_get_group_context();
    if (in_array($form['#node']->type, $group->webb['topic_nodetypes'])) {
      return _webbtopic_form_alter_withtopic($form_id, $form, $group->nid);
    }

    /* Old way that was clunkier, and I think the above works. :-)
    $gids = $_GET['gids'];
    if (empty($gids)) {
      $gids = $form['#node']->og_groups;
    }

    if (!empty($gids)) {
      $gid = current($gids);
      $group = node_load($gid);
      if (in_array($form['#node']->type, $group->webb['topic_nodetypes'])) {
        return _webbtopic_form_alter_withtopic($form_id, $form, $gid);
      }
    }
    */
  }
}

function _webbtopic_form_alter_withtopic($form_id, &$form, $gid) {

  $node = $form['#node'];
  $group = node_load($gid);

  $default = $node->webb['webbtopic_topic'];
  if (!empty($_GET['parent_nid'])) {
    $parent_nid = (int)$_GET['parent_nid'];
    $parent = node_load($parent_nid);
    $default = $parent->webb['webbtopic_topic'];
  }

  drupal_add_js(drupal_get_path('module', 'webbtopic') . '/webbtopic.js', 'module');
  $form['webb'] = array(
    '#tree' => TRUE,
  	'#weight' => -4,
  );
  $form['webb']['webbtopic_topic'] = array(
    '#type' => 'textfield',
  	'#title' => $group->webb['topic_label'],
    '#default_value' => $default,
    '#required' => TRUE,
    '#autocomplete_path' => 'webbtopic/autocomplete/'. $group->nid,
  	'#description' => t('Recently used: ') . _webbtopic_form_alter_withtopic_get_suggestions($group),
  );

  if (module_exists('content')) {
    $form['webb']['webbtopic_topic']['#weight'] = content_extra_field_weight($form['#node']->type, 'webbtopic_topic');
  }

}

function _webbtopic_form_alter_withtopic_get_suggestions($group) {
  $topics = array();

  // This is almost the same as the autocomplete logic, except that
  // we order by the last use and have a different set of limits.
  // We also don't restrict on the name pattern at all.
  $result = db_query_range("SELECT DISTINCT wt.topic
    FROM {webbtopic_topic} wt
      INNER JOIN {node} n ON wt.nid=n.nid
    WHERE wt.nid IN (SELECT nid FROM {og_ancestry} WHERE group_nid=%d)
      AND %d-n.changed < %d
    ORDER BY n.changed", array(
      $group->nid,
      time(),
      WEBBTOPIC_AGE_SUGGESTIONS,
      $string,
    ), 0, WEBBTOPIC_NUM_SUGGESTIONS);

  while ($record = db_fetch_object($result)) {
    $topics[] = theme('webbtopic_topic', $record->topic);
  }

  return implode(', ', $topics);
}

/**
 * Implementation of hook_theme().
 */
function webbtopic_theme($existing, $type, $theme, $path) {
  return array(
    'webbtopic_topic' => array(
      'arguments' => array('name' => ''),
    ),
  );
}

/**
 * Build tags for each topic.
 *
 * @ingroup themeable
 */
function theme_webbtopic_topic($name) {
  if (FALSE !== strpos($name, ',')) {
    $name = '"'. $name .'"';
  }
  return "<span class='webbtopic-topic'>{$name}</span>";
}

function _webbtopic_form_alter_topic_og(&$form, &$form_state, $form_id) {

  // Allow an admin (only) to configure what the topic label is and on what nodes
  // it applies for nodes in this group.

  $form['webbtopic'] = array(
  	'#type' => 'fieldset',
    '#title' => t('Topics'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => user_access('adminster WeBB topics'),
  );
  $form['webbtopic']['webbtopic_topic'] = array(
    '#type' => 'textfield',
    '#title' => t('Topic label'),
    '#description' => t('Specify the topic label to be applied to posts in this group.'),
    '#default_value' => $form['#node']->webb['topic_label'],
  );

  foreach (og_get_types('group_post_standard')as $type) {
    $options[$type] = node_get_types('name', $type);
    if (is_array($form['#node']->webb['topic_nodetypes']) && in_array($type, $form['#node']->webb['topic_nodetypes'])) {
      $defaults[] = $type;
    }
  }
  $form['webbtopic']['webbtopic_nodetypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Applies to'),
    '#options' => $options,
    '#description' => t('Specify content types to which topics should be applied within this group.'),
    '#default_value' => $defaults,
  );

  if (module_exists('content')) {
    $form['webbtopic']['#weight'] = content_extra_field_weight($form['#node']->type, 'webbtopic');
  }

  $form['#submit'][] = 'webbtopic_board_node_form_submit';

}

function _webbtopic_nodeapi_topic_og(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      $node->webb['topic_label'] = db_result(db_query("SELECT label FROM {webbtopic_label} WHERE vid=%d", $node->vid));
      $node->webb['topic_nodetypes'] = db_fetch_column("SELECT type FROM {webbtopic_nodetypes} WHERE vid=%d", $node->vid);
      break;
    case 'insert':
      // Set the label for topics in this group.
      db_insert('webbtopic_label', array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'label' => $node->webbtopic_topic,
      ));
      // Set the node types that will get a topic applied.
      foreach (array_keys(array_filter($node->webbtopic_nodetypes)) as $type) {
        db_insert('webbtopic_nodetypes', array(
          'nid' => $node->nid,
          'vid' => $node->vid,
          'type' => $type,
        ));
      }
      break;
    case 'update':
      // Set the label for topics in this group, with the good old delete/insert cycle.
      db_query("DELETE FROM {webbtopic_label} WHERE vid=%d", $node->vid);
      db_insert('webbtopic_label', array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'label' => $node->webbtopic_topic,
      ));

      // Set the node types that will get a topic applied.
      db_query("DELETE FROM {webbtopic_nodetypes} WHERE vid=%d", $node->vid);
      foreach (array_keys(array_filter($node->webbtopic_nodetypes)) as $type) {
        db_insert('webbtopic_nodetypes', array(
          'nid' => $node->nid,
          'vid' => $node->vid,
          'type' => $type,
        ));
      }
      break;
    case 'delete':
      db_query("DELETE FROM {webbtopic_label} WHERE nid=%d", $node->nid);
      break;
    case 'delete revision':
      db_query("DELETE FROM {webbtopic_label} WHERE vid=%d", $node->vid);
      break;
  }
}


function _webbtopic_nodeapi_withtopic(&$node, $op, $a3 = NULL, $a4 = NULL) {

  switch ($op) {
    case 'prepare':
      break;
    case 'submit':
      break;
    case 'load':
      $node->webb['webbtopic_topic'] = db_result(db_query("SELECT topic FROM {webbtopic_topic} WHERE vid=%d", $node->vid));
      break;
    case 'insert':
      db_insert('webbtopic_topic', array(
        'nid' => $node->nid,
      	'vid' => $node->vid,
        'topic' => $node->webb['webbtopic_topic'],
      ));
      break;
    case 'update':
      db_delete('webbtopic_topic', array(
      	'vid' => $node->vid,
      ));
      db_insert('webbtopic_topic', array(
        'nid' => $node->nid,
      	'vid' => $node->vid,
        'topic' => $node->webb['webbtopic_topic'],
      ));
        break;
    case 'delete':
      db_query("DELETE FROM {webbtopic_topic} WHERE nid=%d", $node->nid);
      break;
    case 'delete revision':
      db_query("DELETE FROM {webbtopic_topic} WHERE vid=%d", $node->vid);
      break;
    case 'view':
      break;
  }
}

/**
 * Implementation of hook_content_extra_fields.
 */
function webbtopic_content_extra_fields($type_name) {
  $extras = array();

  // Because whether or not the topic field shows is very contextual,
  // we'll just report it to CCK always.  It doesn't hurt anything, I think. :-)
  $extra['webbtopic_topic'] = array(
    'label' => t('WeBB topic'),
    'description' => t('Topic selection field for the WeBB posting system.'),
    'weight' => 0,
  );

  if (webbtopic_is_topic_og($type_name)) {
    $extra['webbtopic'] = array(
      'label' => t('WeBB topic configuration'),
      'description' => t('Configuration form for topics on a given Group.'),
      'weight' => 0,
    );
  }

  return $extra;
}


/**
 * Implementation of hook_nodeapi().
 */
function webbtopic_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

  if (webbtopic_is_topic_og($node->type)) {
    return _webbtopic_nodeapi_topic_og($node, $op, $a3, $a4);
  }

  if (!empty($node->og_groups)) {
    $group = node_load(current($node->og_groups));
    if (!empty($group->webb['topic_nodetypes']) && in_array($node->type, $group->webb['topic_nodetypes'])) {
      return _webbtopic_nodeapi_withtopic($node, $op, $a3, $a4);
    }
  }
}

/**
 * Implementation of hook_views_tables().
 */
function webbtopic_views_tables() {
  return array(
    'webbtopic_topic' => array(
      'name' => 'webbtopic_topic',
      'join' => array(
        'left' => array(
          'table' => 'node',
          'field' => 'vid',
        ),
        'right' => array(
          'field' => 'vid',
        ),
      ),
      'handler' => array(
        'webbtopic_views_handler_topic_default' => t('Default handler'),
      ),
      'fields' => array(
        'topic' => array(
          'name' => t('WeBB Topic: Topic'),
          'sortable' => TRUE,
          'handler' => 'webbtopic_views_handler_field_topic',
          'help' => t('Display the topic in which this node is filed.'),
        ),
      ),
      'filters' => array(
        'topic' => array(
           'name' => t('WeBB Topic: Topic'),
           //'list' => 'webbtopic_views_handler_filter_topic',
           //'value' => webbtopic_views_filter_form_topic(),
           'operator' => 'views_handler_operator_like',
           'handler' => 'views_handler_filter_like',
           'help' => t('Filter nodes based on the WeBB topic with which they are tagged.'),
        ),
      ),
      'sorts' => array(
        'topic' => array(
          'name' => t('WeBB Topic: Topic'),
          'help' => t('Sort by the WeBB topic of the node.'),
        ),
      ),
    ),
  );
}

function webbtopic_views_handler_field_topic($fieldinfo, $fielddata, $value, &$data) {
  return $value;
}



function webbtopic_views_handler_topic_default() {
  // I'm not entirely sure what is supposed to go here... :-)
}


/* ---------- Move these elsewhere later --------------- */

/**
 * Returns the first column of a query result as an array.
 * Does not do a rewrite sql for you!
 * Call similar to db_query().
 */
function db_fetch_column($query) {
  $results = array();
  $args = func_get_args();
  array_shift($args);
  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax
    $args = $args[0];
  }
  $res = db_query($query, $args);

  while ($row = db_fetch_array($res)) {
    $results[] = current($row);
  }

  return $results;
}

/**
 * Returns an associative array, with the first column of the result set
 * as the key and the second as the value.
 * Does not do a rewrite sql for you!
 * Call similar to db_query().
 */
function db_fetch_assoc($query) {
  $results = array();
  $args = func_get_args();
  array_shift($args);
  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax
    $args = $args[0];
  }
  $res = db_query($query, $args);

  while ($row = db_fetch_array($res)) {
    $keys = array_keys($row);
    $results[$row[$keys[0]]] = $row[$keys[1]];
  }

  return $results;
}
